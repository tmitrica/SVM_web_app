<!DOCTYPE html>
<html lang="ro">
<%- include("../fragmente/head") %>
<body class="bg-light">
  <%- include("../fragmente/header", {categorii}) %>

  <div class="container mt-5">
    <div class="text-center mb-5">
      <h1 class="display-4 fw-bold text-primary">Mașini de vânzare</h1>
    </div>

    <!-- ►►► Secțiune Filtre ◄◄◄ -->
    <section class="filtre bg-white p-4 rounded-3 shadow-sm mb-5">
      <div class="row g-4">

        <!-- 1. Text (nume cu wildcard) -->
        <div class="col-12 col-md-6 col-lg-4">
          <label for="filtru-nume" class="form-label">Nume mașină</label>
          <input type="text" id="filtru-nume" class="form-control" placeholder="ex: r*ie">
        </div>

        <!-- 2. Range (preț între) -->
        <div class="col-12 col-md-6 col-lg-4 d-flex align-items-center">
          <label class="me-2">Preț între</label>
          <span id="min-range-label"></span>
          <input type="range" id="pret-min" class="form-range mx-2"
                 min="<%= Math.min(...produse.map(p=>p.pret)) %>"
                 max="<%= Math.max(...produse.map(p=>p.pret)) %>"
                 value="<%= Math.min(...produse.map(p=>p.pret)) %>">
          <input type="range" id="pret-max" class="form-range mx-2"
                 min="<%= Math.min(...produse.map(p=>p.pret)) %>"
                 max="<%= Math.max(...produse.map(p=>p.pret)) %>"
                 value="<%= Math.max(...produse.map(p=>p.pret)) %>">
          <span id="max-range-label"></span>
        </div>

        <!-- 3. Datalist (motor) -->
        <div class="col-12 col-md-6 col-lg-4">
          <label for="filtru-motor" class="form-label">Motor</label>
          <input list="motor-options" id="filtru-motor" class="form-control">
          <datalist id="motor-options">
            <% [...new Set(produse.map(p=>p.categorie_secundara))].forEach(m=>{ %>
              <option value="<%= m %>">
            <% }) %>
          </datalist>
        </div>

        <!-- 4. Radio (culoare) -->
        <div class="col-12 col-md-6 col-lg-4">
          <label class="form-label d-block">Culoare</label>
          <div class="form-check form-check-inline">
            <input class="form-check-input" type="radio" name="culoare" id="culoare-orice" value="" checked>
            <label class="form-check-label" for="culoare-orice">Orice</label>
          </div>
          <% [...new Set(produse.map(p=>p.culoare))].forEach(c=>{ %>
            <div class="form-check form-check-inline">
              <input class="form-check-input" type="radio" name="culoare" id="culoare-<%=c%>" value="<%=c%>">
              <label class="form-check-label" for="culoare-<%=c%>"><%=c%></label>
            </div>
          <% }) %>
        </div>

        <!-- 5. Checkbox (garanție) -->
        <div class="col-12 col-md-6 col-lg-4">
          <div class="form-check">
            <input class="form-check-input" type="checkbox" id="filtru-garantie">
            <label class="form-check-label" for="filtru-garantie">Doar cu garanție</label>
          </div>
        </div>

        <!-- 6. Textarea (descriere conține) -->
        <div class="col-12">
          <label for="filtru-desc" class="form-label">Text în descriere</label>
          <textarea id="filtru-desc" rows="2" class="form-control" placeholder="Caută un cuvânt…"></textarea>
        </div>

        <!-- 7. Select simplu (categorie) -->
        <div class="col-12 col-md-6 col-lg-4">
          <label for="filtru-categorie" class="form-label">Categorie</label>
          <select id="filtru-categorie" class="form-select">
            <option value="">Oricare</option>
            <% categorii.forEach(cat=>{ %>
              <option value="<%=cat%>"><%=cat%></option>
            <% }) %>
          </select>
        </div>

        <!-- 8. Select multiplu (kilometraj) -->
        <div class="col-12 col-md-6 col-lg-4">
          <label for="filtru-km" class="form-label">Kilometraj (alege interval)</label>
          <select id="filtru-km" class="form-select" multiple>
            <option value="0-50000">0‑50.000 km</option>
            <option value="50000-100000">50.000‑100.000 km</option>
            <option value="100000-200000">100.000‑200.000 km</option>
          </select>
        </div>

      </div>

      <!-- Butoane actiuni -->
      <div class="mt-4 text-center">
        <button id="filtreaza"     class="btn btn-primary px-4"><i class="bi bi-funnel me-2"></i>Filtrează</button>
        <button id="sorteaza-asc"  class="btn btn-outline-primary"><i class="bi bi-sort-alpha-down me-2"></i>A‑Z</button>
        <button id="sorteaza-desc" class="btn btn-outline-primary"><i class="bi bi-sort-alpha-up me-2"></i>Z‑A</button>
        <button id="calculeaza"    class="btn btn-success"><i class="bi bi-calculator me-2"></i>Calculează</button>
        <button id="reseteaza"     class="btn btn-danger"><i class="bi bi-arrow-counterclockwise me-2"></i>Resetează</button>
      </div>
    </section>

    <!-- ►►► Lista Produse ◄◄◄ -->
    <section class="produse-list row row-cols-1 row-cols-md-2 row-cols-lg-3 row-cols-xl-4 g-4">
      <% produse.forEach(produs => { %>
        <div class="col">
          <article class="produs card h-100 shadow-sm"
                   data-categorie="<%= produs.categorie_mare %>"
                   data-culoare="<%= produs.culoare %>"
                   data-pret="<%= produs.pret %>"
                   data-kilometraj="<%= produs.kilometraj %>"
                   data-garantie="<%= produs.garantie_extensibila %>"
                   data-nume="<%= produs.nume.toLowerCase() %>"
                   data-categorie-secundara="<%= produs.categorie_secundara.toLowerCase() %>">
            <div class="card-body d-flex flex-column">
              <div class="row g-3">
                <div class="col-md-5">
                  <img src="../../resurse/imagini/<%= produs.imagine %>" 
                       class="img-fluid rounded-3" 
                       alt="<%= produs.nume %>"
                       style="height: 200px; object-fit: cover;">
                </div>
                <div class="col-md-7">
                  <h2 class="card-title fs-5 fw-bold mb-3"><%= produs.nume %></h2>
                  <span class="badge bg-secondary mb-2"><%= produs.categorie_mare %></span>
                  <table class="table table-sm mb-3">
                    <tbody>
                      <tr><td class="fw-medium">Preț</td>      <td class="text-end"><%= produs.pret %> €</td></tr>
                      <tr><td class="fw-medium">Kilometraj</td><td class="text-end"><%= produs.kilometraj %> km</td></tr>
                      <tr><td class="fw-medium">Motor</td>     <td class="text-end"><%= produs.categorie_secundara %></td></tr>
                      <tr><td class="fw-medium">Culoare</td>   <td class="text-end"><%= produs.culoare %></td></tr>
                      <tr><td class="fw-medium">Adăugat</td>   <td class="text-end"><%= formatDate(produs.data_adaugare) %></td></tr>
                      <tr><td class="fw-medium">Garanție</td>  <td class="text-end"><%= produs.garantie_extensibila ? 'Da' : 'Nu' %></td></tr>
                    </tbody>
                  </table>
                </div>
              </div>
              <div class="mt-auto">
                <p class="card-text"><%= produs.descriere %></p>
                <a href="/produs/<%= produs.id %>" class="btn btn-primary w-100">
                  <i class="bi bi-info-circle me-2"></i>Detalii complete
                </a>
              </div>
            </div>
          </article>
        </div>
      <% }) %>
    </section>
  </div>

  <%- include("../fragmente/footer") %>

  <!-- ►►► SCRIPT: filtre, sortare, reset, calcul ◄◄◄ -->
  <script>
  document.addEventListener('DOMContentLoaded', () => {
    const container      = document.querySelector('.produse-list');
    let products         = Array.from(container.children);
    const originalOrder  = products.map(c => c.cloneNode(true));

    // ----- elemente DOM filtre & butoane -----
    const numeInput      = document.getElementById('filtru-nume');
    const pretMinInput   = document.getElementById('pret-min');
    const pretMaxInput   = document.getElementById('pret-max');
    const motorInput     = document.getElementById('filtru-motor');
    const culoareInputs  = Array.from(document.querySelectorAll('input[name="culoare"]'));
    const garantieInput  = document.getElementById('filtru-garantie');
    const descInput      = document.getElementById('filtru-desc');
    const categorieInput = document.getElementById('filtru-categorie');
    const kmSelect       = document.getElementById('filtru-km');
    const btnFiltreaza   = document.getElementById('filtreaza');
    const btnSortAsc     = document.getElementById('sorteaza-asc');
    const btnSortDesc    = document.getElementById('sorteaza-desc');
    const btnReseteaza   = document.getElementById('reseteaza');
    const btnCalculeaza  = document.getElementById('calculeaza');

    // actualizare etichete range
    function updateRangeLabels() {
      document.getElementById('min-range-label').textContent = pretMinInput.value + '€';
      document.getElementById('max-range-label').textContent = pretMaxInput.value + '€';
    }
    pretMinInput.addEventListener('input', updateRangeLabels);
    pretMaxInput.addEventListener('input', updateRangeLabels);
    updateRangeLabels();

    // filtrare generală
    function aplicaFiltre() {
      const pattern = new RegExp('^' + numeInput.value.replace(/\*/g,'.*') + '$','i');
      const pMin    = +pretMinInput.value, pMax = +pretMaxInput.value;
      const motor   = motorInput.value.trim().toLowerCase();
      const culoare = culoareInputs.find(r=>r.checked).value;
      const doarGar = garantieInput.checked;
      const textDesc= descInput.value.toLowerCase();
      const cat     = categorieInput.value;
      const kmRanges = Array.from(kmSelect.selectedOptions).map(o=>o.value);

      products.forEach(col => {
        const card  = col.querySelector('.produs');
        const d     = card.dataset;
        const pret  = +d.pret;
        const nume  = d.nume.toLowerCase();
        const motorP= (d.categorieSecundara||d.motor||'').toLowerCase();
        const desc  = card.querySelector('.card-text').textContent.toLowerCase();
        const km    = +d.kilometraj;
        const gar   = d.garantie === 'true';

        let kmOk = true;
        if (kmRanges.length) {
          kmOk = kmRanges.some(r => {
            const [lo,hi] = r.split('-').map(Number);
            return km >= lo && km <= hi;
          });
        }

        const ok = 
          (!numeInput.value   || pattern.test(nume)) &&
          pret >= pMin && pret <= pMax &&
          (!motor || motorP === motor) &&
          (!culoare || d.culoare === culoare) &&
          (!doarGar || gar) &&
          (!textDesc || desc.includes(textDesc)) &&
          (!cat     || d.categorie === cat) &&
          kmOk;

        col.style.display = ok ? '' : 'none';
      });
    }

    // sortare A‑Z / Z‑A
    function sortProduse(asc) {
      const viz = products.filter(c=>c.style.display!=='none');
      viz.sort((a,b) => {
        const na = a.querySelector('.card-title').textContent.toLowerCase();
        const nb = b.querySelector('.card-title').textContent.toLowerCase();
        return asc ? na.localeCompare(nb) : nb.localeCompare(na);
      });
      container.innerHTML = '';
      viz.forEach(c => container.appendChild(c));
      products = Array.from(container.children);
    }

    // resetare completă
    function resetAll() {
      if (!confirm('Sigur vrei să resetezi filtrele și sortarea?')) return;
      numeInput.value = '';
      pretMinInput.value = pretMinInput.min;
      pretMaxInput.value = pretMaxInput.max;
      updateRangeLabels();
      motorInput.value = '';
      culoareInputs.find(r=>r.id==='culoare-orice').checked = true;
      garantieInput.checked = false;
      descInput.value = '';
      categorieInput.value = '';
      kmSelect.selectedIndex = -1;
      container.innerHTML = '';
      originalOrder.forEach(c => container.appendChild(c.cloneNode(true)));
      products = Array.from(container.children);
    }

    // calcul statistici
    function calculeaza() {
      const viz = products.filter(c=>c.style.display!=='none');
      const preturi = viz.map(c=>+c.querySelector('.produs').dataset.pret);
      if (!preturi.length) return alert('Nu e niciun produs afișat!');
      const total = preturi.reduce((a,b)=>a+b,0);
      const medie = (total/preturi.length).toFixed(2);
      const mini  = Math.min(...preturi);
      const maxi  = Math.max(...preturi);
      const stats = document.createElement('div');
      stats.className = 'position-fixed bottom-0 end-0 m-3 p-3 bg-white shadow-lg rounded-3';
      stats.innerHTML = `
        <h5>Statistici Preț</h5>
        <ul class="list-unstyled mb-0">
          <li>Total: ${total}€</li>
          <li>Medie: ${medie}€</li>
          <li>Minim: ${mini}€</li>
          <li>Maxim: ${maxi}€</li>
        </ul>`;
      document.body.appendChild(stats);
      setTimeout(()=> stats.remove(), 2000);
    }

    // legare evenimente
    btnFiltreaza.addEventListener('click', aplicaFiltre);
    btnSortAsc.  addEventListener('click', ()=>sortProduse(true));
    btnSortDesc. addEventListener('click', ()=>sortProduse(false));
    btnReseteaza.addEventListener('click', resetAll);
    btnCalculeaza.addEventListener('click', calculeaza);
    categorieInput.addEventListener('change', aplicaFiltre);
    kmSelect.addEventListener('change', aplicaFiltre);

  });
  </script>
</body>
</html>
