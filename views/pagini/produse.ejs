<!DOCTYPE html>
<html>
<%- include("../fragmente/head") %>
<body>
    <%- include("../fragmente/header", {categorii: categorii}) %>

    <div class="reflected-text">
        <h2 data-text="Mașini de vânzare">Mașini de vânzare</h2>
    </div>
    
    <p>La <b><abbr title="Site vânzări mașini">SVM</abbr></b>, știm cât de importantă este alegerea mașinii potrivite. De aceea, îți punem la dispoziție o selecție largă de <b>autoturisme</b> cu prețuri corecte și oferte atractive.</p>

    <main class="produse-container">
        <section class="filtre">
            <div class="filtru-grup">
                <label for="filtru-nume">Nume produs:</label>
                <input type="text" id="filtru-nume" placeholder="Ex: r*ie">
                <small>Suportă wildcard (*)</small>
            </div>

            <div class="filtru-grup">
                <label>Preț:</label>
                <div class="range-container">
                    <input type="range" id="pret-min" min="0" max="100000" step="1000">
                    <input type="range" id="pret-max" min="0" max="100000" step="1000">
                    <div class="range-labels">
                        <span id="pret-min-afis">0</span>
                        <span id="pret-max-afis">100000</span>
                    </div>
                </div>
            </div>

            <div class="filtru-grup">
                <label for="filtru-categorie">Categorie:</label>
                <select id="filtru-categorie">
                    <option value="">Toate</option>
                    <% categorii.forEach(categorie => { %>
                        <option value="<%= categorie %>"><%= categorie %></option>
                    <% }) %>
                </select>
            </div>

            <div class="filtru-grup">
                <label>Culoare:</label>
                <div class="radio-grup">
                    <label>
                        <input type="radio" name="culoare" value="" checked> Oricare
                    </label>
                    <% [...new Set(produse.map(p => p.culoare))].forEach(culoare => { %>
                        <label>
                            <input type="radio" name="culoare" value="<%= culoare %>">
                            <%= culoare %>
                        </label>
                    <% }) %>
                </div>
            </div>

            <div class="filtru-grup">
                <label>
                    <input type="checkbox" id="filtru-garantie">
                    Cu garanție extensibilă
                </label>
            </div>

            <div class="butoane-filtre">
                <button id="filtreaza">Filtreaza</button>
                <button id="sorteaza-asc">Sorteaza Asc</button>
                <button id="sorteaza-desc">Sorteaza Desc</button>
                <button id="calculeaza">Calculeaza</button>
                <button id="reseteaza">Reseteaza</button>
            </div>
        </section>

        <section class="produse-list">
            <% produse.forEach(produs => { %>
            <article id="art<%= produs.id %>" 
                    class="produs <%= produs.categorie_mare.replace(/ /g, '-') %>"
                    data-categorie="<%= produs.categorie_mare %>"
                    data-culoare="<%= produs.culoare %>"
                    data-pret="<%= produs.pret %>"
                    data-kilometraj="<%= produs.kilometraj %>"
                    data-garantie="<%= produs.garantie_extensibila %>"
                    data-nume="<%= produs.nume.toLowerCase() %>">
                <div class="imagine-produs">
                    <img src="/resurse/imagini/<%= produs.imagine %>" alt="<%= produs.nume %>">
                </div>
                
                <div class="informatii-produs">
                    <h2><%= produs.nume %></h2>
                    <p class="categorie">Categorie: <%= produs.categorie_mare %></p>
                    <p class="descriere"><%= produs.descriere %></p>
                    
                    <table class="caracteristici">
                        <tr>
                            <td>Kilometraj</td>
                            <td><%= produs.kilometraj %> km</td>
                        </tr>
                        <tr>
                            <td>Motor</td>
                            <td><%= produs.categorie_secundara %></td>
                        </tr>
                        <tr>
                            <td>Culoare</td>
                            <td><%= produs.culoare %></td>
                        </tr>
                        <tr>
                            <td>Data adăugării</td>
                            <td>
                                <time datetime="<%= new Date(produs.data_adaugare).toISOString() %>">
                                    <%= new Date(produs.data_adaugare).toLocaleDateString('ro-RO', { 
                                        day: '2-digit', 
                                        month: 'long', 
                                        year: 'numeric', 
                                        weekday: 'long' 
                                    }).replace(/,/g, '') %>
                                </time>
                            </td>
                        </tr>
                        <tr>
                            <td>Garantie extensibilă</td>
                            <td><%= produs.garantie_extensibila ? 'Da' : 'Nu' %></td>
                        </tr>
                    </table>

                    <a href="/produs/<%= produs.id %>" class="btn-detalii">Vezi detalii</a>
                </div>
            </article>
            <% }); %>
        </section>
    </main>

            <section id="cumparare">
                <h3>Cumpără</h3>
                <p>Am citit <i lang="en">The Mirror</i> zilele trecute și am dat peste o scrisoare de la un cititor care a scris: „Mă deplasam cu bicicleta spre muncă când un Ferrari roșu s-a oprit lângă mine. Din geam, Jeremy Clarkson a strigat 'Ia-ți o mașină!'' și a plecat.” ~ Jeremy Clarkson</p>
                <p>Site-ul nostru suportă <b>plați online</b> și oferă o <b>garanție</b> contra cost de un an calendaristic. <b>Factura</b> va fi trimisă pe mail după încheierea tranzacției</p>
                <p>Costul garanției este calculat astfel: </p>
                <math xmlns="http://www.w3.org/1998/Math/MathML">
                    <mi>cost</mi>
                    <mo>=</mo>
                    <mrow>
                        <mo>(</mo>
                        <mfrac>
                            <mi>nr_km_mașină</mi>
                            <mn>1000</mn>
                        </mfrac>
                        <mo>+</mo>
                        <mfrac>
                            <mn>1</mn>
                            <mn>20</mn>
                        </mfrac>
                        <mo>&#x22C5;</mo>  <!-- Punct de înmulțire -->
                        <mi>prețul_mașinii</mi>
                        <mo>)</mo>
                        <mo>&#x22C5;</mo> 
                        <mi>nr_ani_garanție</mi>
                    </mrow>
                </math>
            </section>
        </section>

    <%- include("../fragmente/footer") %>

<script>
    let originalProductOrder = [];
    document.addEventListener('DOMContentLoaded', () => {
        originalProductOrder = Array.from(document.querySelectorAll('.produse-list .produs'));
    });

    function convertPatternToRegex(pattern) {
        const escaped = pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
        const regexStr = `^${escaped.replace(/\*/g, '.*')}$`;
        return new RegExp(regexStr, 'i');
    }

    function updateRangeLabels() {
        document.getElementById('pret-min-afis').textContent = pretMin.value;
        document.getElementById('pret-max-afis').textContent = pretMax.value;
    }

    function aplicaFiltre() {
        const numePattern = document.getElementById('filtru-nume').value;
        const pretMinVal = parseInt(document.getElementById('pret-min').value);
        const pretMaxVal = parseInt(document.getElementById('pret-max').value);
        const categorie = document.getElementById('filtru-categorie').value;
        const culoare = document.querySelector('input[name="culoare"]:checked').value;
        const garantie = document.getElementById('filtru-garantie').checked;

        const numeRegex = numePattern ? convertPatternToRegex(numePattern) : null;

        document.querySelectorAll('.produs').forEach(produs => {
            const nume = produs.dataset.nume;
            const produsPret = parseInt(produs.dataset.pret);
            const produsCategorie = produs.dataset.categorie;
            const produsCuloare = produs.dataset.culoare;
            const produsGarantie = produs.dataset.garantie === 'true';

            const matchesNume = !numeRegex || numeRegex.test(nume);
            const matchesPret = produsPret >= pretMinVal && produsPret <= pretMaxVal;
            const matchesCategorie = !categorie || produsCategorie === categorie;
            const matchesCuloare = !culoare || produsCuloare === culoare;
            const matchesGarantie = !garantie || produsGarantie;

            produs.style.display = matchesNume && matchesPret && matchesCategorie && 
                                  matchesCuloare && matchesGarantie ? 'block' : 'none';
        });
    }

    // Range initialization
    const pretMin = document.getElementById('pret-min');
    const pretMax = document.getElementById('pret-max');
    const preturi = Array.from(document.querySelectorAll('.produs'))
                     .map(p => parseInt(p.dataset.pret));
    const minPrice = Math.min(...preturi);
    const maxPrice = Math.max(...preturi);

    pretMin.min = minPrice;
    pretMin.max = maxPrice;
    pretMin.value = minPrice;
    pretMax.min = minPrice;
    pretMax.max = maxPrice;
    pretMax.value = maxPrice;
    updateRangeLabels();

    // Event listeners
    pretMin.addEventListener('input', updateRangeLabels);
    pretMax.addEventListener('input', updateRangeLabels);
    document.getElementById('filtreaza').addEventListener('click', aplicaFiltre);

    // Sorting
    function sortProduse(ascending) {
        const container = document.querySelector('.produse-list');
        const produse = Array.from(container.querySelectorAll('.produs'));

        produse.sort((a, b) => {
            const numeA = a.querySelector('h2').textContent.toLowerCase();
            const numeB = b.querySelector('h2').textContent.toLowerCase();
            const descA = a.querySelector('.descriere').textContent.length;
            const descB = b.querySelector('.descriere').textContent.length;

            if (numeA === numeB) return ascending ? descA - descB : descB - descA;
            return ascending ? numeA.localeCompare(numeB) : numeB.localeCompare(numeA);
        });

        container.innerHTML = '';
        produse.forEach(p => container.appendChild(p));
    }

    document.getElementById('sorteaza-asc').addEventListener('click', () => sortProduse(true));
    document.getElementById('sorteaza-desc').addEventListener('click', () => sortProduse(false));

    // Calculations
    function calculeaza() {
        const vizibile = Array.from(document.querySelectorAll('.produs'))
                          .filter(p => p.style.display !== 'none');
        const preturi = vizibile.map(p => parseInt(p.dataset.pret));
        
        const suma = preturi.reduce((a, b) => a + b, 0);
        const medie = preturi.length ? (suma / preturi.length).toFixed(2) : 0;
        const min = preturi.length ? Math.min(...preturi) : 0;
        const max = preturi.length ? Math.max(...preturi) : 0;

        const div = document.createElement('div');
        div.style.position = 'fixed';
        div.style.bottom = '20px';
        div.style.right = '20px';
        div.style.padding = '15px';
        div.style.background = '#fff';
        div.style.border = '2px solid #333';
        div.textContent = `Suma: ${suma}, Medie: ${medie}, Min: ${min}, Max: ${max}`;

        document.body.appendChild(div);
        setTimeout(() => div.remove(), 2000);
    }
    document.getElementById('calculeaza').addEventListener('click', calculeaza);

    // Reset
    function reseteazaFiltre() {
        if (confirm('Sigur doriți să resetați toate filtrele și sortarea?')) {
            // Reset inputs
            document.getElementById('filtru-nume').value = '';
            pretMin.value = minPrice;
            pretMax.value = maxPrice;
            document.getElementById('filtru-categorie').value = '';
            document.querySelector('input[name="culoare"][value=""]').checked = true;
            document.getElementById('filtru-garantie').checked = false;
            updateRangeLabels();

            // Reset display
            document.querySelectorAll('.produs').forEach(p => p.style.display = 'block');

            // Reset sorting
            const container = document.querySelector('.produse-list');
            container.innerHTML = '';
            originalProductOrder.forEach(p => container.appendChild(p));
        }
    }
    document.getElementById('reseteaza').addEventListener('click', reseteazaFiltre);
</script>
</body>
</html>