<!DOCTYPE html>
<html lang="ro">
<%- include("../fragmente/head") %>
<!-- bonusuri etapa 6: 1 4 5 11 13 14 17 -->
<body class="bg-light">
  <%- include("../fragmente/header", {categorii}) %>

  <div class="container mt-5">
    <div class="text-center mb-5">
      <h1 class="display-4 fw-bold text-primary">Mașini de vânzare</h1>
    </div>

    <!-- ►►► Secțiune Filtre ◄◄◄ -->
    <section class="filtre bg-white p-4 rounded-3 shadow-sm mb-5">
      <div class="row g-4">

        <!-- 1. Text (nume cu wildcard) -->
        <div class="col-12 col-md-6 col-lg-4">
          <label for="filtru-nume" class="form-label">Nume mașină</label>
          <input type="text" id="filtru-nume" class="form-control" placeholder="ex: a*4">
          <!-- Comentariu: aici avem input de tip text care permite wildcard '*' în filtrare -->
        </div>

        <!-- 2. Range (preț între) -->
        <div class="col-12 col-md-6 col-lg-4 d-flex align-items-center">
          <label class="me-2">Preț între</label>
          <span id="min-range-label"></span>
          <input type="range" id="pret-min" class="form-range mx-2"
                 min="<%= Math.min(...produse.map(p=>p.pret)) %>"
                 max="<%= Math.max(...produse.map(p=>p.pret)) %>"
                 value="<%= Math.min(...produse.map(p=>p.pret)) %>">
          <input type="range" id="pret-max" class="form-range mx-2"
                 min="<%= Math.min(...produse.map(p=>p.pret)) %>"
                 max="<%= Math.max(...produse.map(p=>p.pret)) %>"
                 value="<%= Math.max(...produse.map(p=>p.pret)) %>">
          <span id="max-range-label"></span>
        </div>

        <!-- 3. Datalist (motor) -->
        <div class="col-12 col-md-6 col-lg-4">
          <label for="filtru-motor" class="form-label">Motor</label>
          <input list="motor-options" id="filtru-motor" class="form-control"> <!-- input cu datalist -->
          <datalist id="motor-options">
            <% [...new Set(produse.map(p=>p.categorie_secundara))].forEach(m=>{ %>
              <option value="<%= m %>">
            <% }) %>
          </datalist>
          <!-- Comentariu: datalist generează opțiuni din categorii secundare distincte -->
        </div>

        <!-- 4. Radio (culoare) -->
        <div class="col-12 col-md-6 col-lg-4">
          <label class="form-label d-block">Culoare</label>
          <div class="form-check form-check-inline">
            <input class="form-check-input" type="radio" name="culoare" id="culoare-orice" value="" checked>
            <label class="form-check-label" for="culoare-orice">Orice</label>
          </div>
          <% [...new Set(produse.map(p=>p.culoare))].forEach(c=>{ %>
            <div class="form-check form-check-inline">
              <input class="form-check-input" type="radio" name="culoare" id="culoare-<%=c%>" value="<%=c%>">
              <label class="form-check-label" for="culoare-<%=c%>"><%=c%></label>
            </div>
          <% }) %>
          <!-- Comentariu: input-uri radio pentru selectarea culorii -->
        </div>

        <!-- 5. Checkbox (garanție) -->
        <div class="col-12 col-md-6 col-lg-4">
          <div class="form-check">
            <input class="form-check-input" type="checkbox" id="filtru-garantie">
            <label class="form-check-label" for="filtru-garantie">Doar cu garanție</label>
          </div>
          <!-- Comentariu: input de tip checkbox pentru filtrarea garanției -->
        </div>

        <!-- 6. Textarea (descriere conține) -->
        <div class="col-12">
          <label for="filtru-desc" class="form-label">Text în descriere</label>
          <textarea id="filtru-desc" rows="2" class="form-control" placeholder="Caută un cuvânt…"></textarea>
          <!-- Comentariu: textarea pentru căutarea textului în descriere -->
        </div>

        <!-- 7. Select simplu (categorie) -->
        <div class="col-12 col-md-6 col-lg-4">
          <label for="filtru-categorie" class="form-label">Categorie</label>
          <select id="filtru-categorie" class="form-select">
            <option value="">Oricare</option>
            <% categorii.forEach(cat=>{ %>
              <option value="<%=cat%>"><%=cat%></option>
            <% }) %>
          </select>
          <!-- Comentariu: select simplu pentru categorie -->
        </div>

       <!-- 8. Select multiplu (kilometraj) -->
        <%
          // Generare intervale kilometraj dinamice
          const kilometre = produse.map(p => p.kilometraj);
          const kmMax = Math.max(...kilometre);
          const step = 50000;
          const intervals = [];
          
          for (let current = 0; current < kmMax; ) {
            const next = current + step;
            const upper = next > kmMax ? kmMax : next;
            intervals.push({start: current, end: upper});
            current = upper + 1;
          }
        %>

        <select id="filtru-km" class="form-select" multiple>
          <% intervals.forEach(interval => { %>
            <option value="<%= interval.start %>-<%= interval.end %>">
              <%= interval.start.toLocaleString() %>‑<%= interval.end.toLocaleString() %> km
            </option>
          <% }); %>
        </select>
      </div>

      <!-- Butoane actiuni -->
      <div class="mt-4 text-center">
        <button id="filtreaza"     class="btn btn-primary px-4"><i class="bi bi-funnel me-2"></i>Filtrează</button>
        <button id="sorteaza-asc"  class="btn btn-outline-primary"><i class="bi bi-sort-alpha-down me-2"></i>A‑Z</button>
        <button id="sorteaza-desc" class="btn btn-outline-primary"><i class="bi bi-sort-alpha-up me-2"></i>Z‑A</button>
        <button id="calculeaza"    class="btn btn-success"><i class="bi bi-calculator me-2"></i>Calculează</button>
        <button id="reseteaza"     class="btn btn-danger"><i class="bi bi-arrow-counterclockwise me-2"></i>Resetează</button>
      </div>
    </section>

    <!-- ►►► Lista Produse ◄◄◄ -->
    <section class="produse-list row row-cols-1 row-cols-md-2 row-cols-lg-3 row-cols-xl-4 g-4">
  <% produse.forEach(produs => { %>
    <div class="col">
      <article class="produs card h-100 shadow-sm position-relative"
               data-categorie="<%= produs.categorie_mare %>"
               data-culoare="<%= produs.culoare %>"
               data-pret="<%= produs.pret %>"
               data-kilometraj="<%= produs.kilometraj %>"
               data-garantie="<%= produs.garantie_extensibila %>"
               data-nume="<%= produs.nume.toLowerCase() %>"
               data-categorie-secundara="<%= produs.categorie_secundara.toLowerCase() %>">
      
        <!-- Adăugăm banner pentru cel mai ieftin produs în categorie -->
        <!-- Adăugăm banner pentru cel mai ieftin produs în categorie -->
        <% if (typeof cheapestByCategory !== 'undefined' && cheapestByCategory[produs.categorie_mare] && cheapestByCategory[produs.categorie_mare].id === produs.id) { %>
          <div class="position-absolute top-0 start-0 w-100 text-center p-2 bg-warning text-dark fw-bold" style="z-index: 10;">
            <i class="bi bi-tag-fill me-1"></i> Cel mai ieftin în <%= produs.categorie_mare %>
          </div>
        <% } %>
        
        <div class="card-body d-flex flex-column">
          <div class="row g-3">
            <div class="col-md-5">
              <img src="../../resurse/imagini/<%= produs.imagine %>" 
                   class="img-fluid rounded-3" 
                   alt="<%= produs.nume %>"
                   style="height: 200px; object-fit: cover;">
            </div>
            <div class="col-md-7">
              <h2 class="card-title fs-5 fw-bold mb-3"><%= produs.nume %></h2>
              <span class="badge bg-secondary mb-2"><%= produs.categorie_mare %></span>
              <table class="table table-sm mb-3">
                <tbody>
                  <tr><td class="fw-medium">Preț</td>      <td class="text-end"><%= produs.pret %> €</td></tr>
                  <tr><td class="fw-medium">Kilometraj</td><td class="text-end"><%= produs.kilometraj %> km</td></tr>
                  <tr><td class="fw-medium">Motor</td>     <td class="text-end"><%= produs.categorie_secundara %></td></tr>
                  <tr><td class="fw-medium">Culoare</td>   <td class="text-end"><%= produs.culoare %></td></tr>
                  <tr><td class="fw-medium">Adăugat</td>   <td class="text-end"><%= formatDate(produs.data_adaugare) %></td></tr>
                  <tr><td class="fw-medium">Garanție</td>  <td class="text-end"><%= produs.garanție_extensibilă ? 'Da' : 'Nu' %></td></tr>
                </tbody>
              </table>
            </div>
          </div>
          <div class="mt-auto">
            <p class="card-text"><%= produs.descriere %></p>
            <a href="/produs/<%= produs.id %>" class="btn btn-primary w-100">
              <i class="bi bi-info-circle me-2"></i>Detalii complete
            </a>
          </div>
        </div>
      </article>
    </div>
  <% }) %>
</section>
  </div>

    <!-- Modal pentru detalii produs -->
  <div class="modal fade" id="modalProdus" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header bg-primary text-light">
          <h5 class="modal-title" id="modalTitlu"></h5>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body" id="modalBody"></div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Închide</button>
        </div>
      </div>
    </div>
  </div>

  <%- include("../fragmente/footer") %>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <!-- ►►► SCRIPT: filtre, sortare, reset, calcul ◄◄◄ -->
 <script>
document.addEventListener('DOMContentLoaded', () => {
    // Numărul de produse pe pagină
    const K = 6;
    // Pagina curentă la afișaj
    let currentPage = 1;
    // Lista completă de elemente .col din DOM
    let allProducts = [];
    // Lista filtrată, actualizată de fiecare dată când aplici filtre
    let filteredProducts = [];
    // Containerul în care inserăm produsele paginate
    const container = document.querySelector('.produse-list');
    // Vom crea dinamic un div pentru butoanele de paginare
    const paginationContainer = document.createElement('div');
    
    // Elementele de input pentru filtre
    const pretMinInput    = document.getElementById('pret-min');
    const pretMaxInput    = document.getElementById('pret-max');
    const numeInput       = document.getElementById('filtru-nume');
    const motorInput      = document.getElementById('filtru-motor');
    const culoareInputs   = Array.from(document.querySelectorAll('input[name="culoare"]'));
    const garantieInput   = document.getElementById('filtru-garantie');
    const descInput       = document.getElementById('filtru-desc');
    const categorieInput  = document.getElementById('filtru-categorie');
    const kmSelect        = document.getElementById('filtru-km');

    // Inițializează paginarea și atașează evenimente
    function init() {
        // Păstrează referințele la toate coloanele inițiale
        allProducts      = Array.from(container.children);
        // La început, toate produsele sunt vizibile
        filteredProducts = [...allProducts];

        // Clasa CSS pentru containerul de paginare
        paginationContainer.className = 'pagination-container d-flex justify-content-center my-4';

        // Reset complet cu confirmare
        document.getElementById('reseteaza').addEventListener('click', e => {
            e.preventDefault();
            if (confirm('Sigur doriți să resetați toate filtrele și sortarea?\nToate modificările vor fi pierdute.')) {
                resetAll();
            }
        });
        
        // Când se schimbă valorile range-urilor, actualizează etichetele și filtrează
        pretMinInput.addEventListener('input', () => {
            updateRangeLabels();
            aplicaFiltre();
        });
        pretMaxInput.addEventListener('input', () => {
            updateRangeLabels();
            aplicaFiltre();
        });
        
        // Alte evenimente pentru filtre
        setupEventListeners();

        // Aplică filtrele pentru prima dată
        aplicaFiltre();
    }

    // Actualizează textul de lângă slider-ele price-range
    function updateRangeLabels() {
        document.getElementById('min-range-label').textContent = `${pretMinInput.value}€`;
        document.getElementById('max-range-label').textContent = `${pretMaxInput.value}€`;
    }

    // Filtrarea propriu-zisă
    function aplicaFiltre() {
        filteredProducts = allProducts.filter(col => {
            const card     = col.querySelector('.produs');
            const pret     = Number(card.dataset.pret);
            const nume     = card.dataset.nume;
            const motor    = card.dataset.categorieSecundara.toLowerCase();
            const culoare  = card.dataset.culoare;
            const km       = Number(card.dataset.kilometraj);
            const garantie = card.dataset.garantie === 'true';
            const desc     = card.querySelector('.card-text').textContent.toLowerCase();
            const categorie= card.dataset.categorie;
            
            // Condiție preț în interval
            const pretOK    = pret >= pretMinInput.value && pret <= pretMaxInput.value;
            // Wildcard * în nume: transformăm în regex
            const numePattern = new RegExp('^' + numeInput.value.replace(/\*/g, '.*') + '$', 'i');
            const numeOK     = !numeInput.value || numePattern.test(nume);
            // Motor exact match
            const motorOK    = !motorInput.value || motor === motorInput.value.trim().toLowerCase();
            // Culoare selectată
            const checkedColor = culoareInputs.find(r => r.checked).value;
            const culoareOK     = !checkedColor || culoare === checkedColor;
            // Doar cu garanție
            const garantieOK   = !garantieInput.checked || garantie;
            // Text în descriere
            const descOK       = !descInput.value || desc.includes(descInput.value.toLowerCase());
            // Categorie
            const categorieOK  = !categorieInput.value || categorie === categorieInput.value;
            // Kilometraj în oricare din intervalele selectate
            const kmRanges = Array.from(kmSelect.selectedOptions).map(o => o.value);
            const kmOK = kmRanges.length === 0 || kmRanges.some(range => {
                const [min, max] = range.split('-').map(Number);
                return km >= min && km <= max;
            });

            // Toate condițiile trebuie îndeplinite
            return pretOK && numeOK && motorOK && culoareOK && garantieOK && descOK && categorieOK && kmOK;
        });

        // Odată filtrate, revine la pagina 1 și regenerează lista
        currentPage = 1;
        refreshPagination();
    }

    // Reafișează produsele pe pagina curentă și construiește butoanele de paginare
    function refreshPagination() {
    // Golește containerul
    container.innerHTML = '';
    // Calculează indexurile de start și end
    const startIdx = (currentPage - 1) * K;
    const endIdx   = startIdx + K;
    
    // Afișează doar sub-array-ul relevant
    filteredProducts.slice(startIdx, endIdx).forEach(col => {
        container.appendChild(col.cloneNode(true));
    });

    // Câte pagini trebuie
    const pageCount = Math.ceil(filteredProducts.length / K);
    paginationContainer.innerHTML = '';

    // Generează câte un buton pentru fiecare pagină
    for (let i = 1; i <= pageCount; i++) {
        const btn = document.createElement('button');
        // Clasă diferită dacă e pagina curentă
        btn.className = `btn ${i === currentPage ? 'btn-primary active-page' : 'btn-outline-primary'} mx-1`;
        btn.textContent = i;
        btn.addEventListener('click', () => {
            currentPage = i;
            refreshPagination();
            
            // Scroll la începutul secțiunii de produse
            document.querySelector('.produse-list').scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        });
        paginationContainer.appendChild(btn);
    }

    // Inserează containerul de paginare după lista de produse, o singură dată
    if (!container.parentNode.contains(paginationContainer)) {
        container.parentNode.insertBefore(paginationContainer, container.nextSibling);
    }
    
    // Scroll la început după încărcarea paginii
    window.scrollTo({
        top: 0,
        behavior: 'smooth'
    });
}

    // Atașează evenimente change/click pentru filtre și butoane
    function setupEventListeners() {
        // Change pe toate input-urile de filtrare (except radio/checkbox)
        [numeInput, motorInput, descInput, categorieInput, kmSelect]
            .forEach(input => input.addEventListener('change', aplicaFiltre));
        // Radio button-urile de culoare
        culoareInputs.forEach(radio => radio.addEventListener('change', aplicaFiltre));
        // Butoanele de sortare și calcul
        document.getElementById('sorteaza-asc').addEventListener('click', () => sortProduse(true));
        document.getElementById('sorteaza-desc').addEventListener('click', () => sortProduse(false));
        document.getElementById('calculeaza').addEventListener('click', calculeaza);
    }

    // Resetează toate filtrele la valorile inițiale și reafișează
    function resetAll() {
        pretMinInput.value      = pretMinInput.min;
        pretMaxInput.value      = pretMaxInput.max;
        numeInput.value         = '';
        motorInput.value        = '';
        culoareInputs.find(r => r.id === 'culoare-orice').checked = true;
        garantieInput.checked   = false;
        descInput.value         = '';
        categorieInput.value    = '';
        kmSelect.selectedIndex  = -1;
        
        // Restaurăm lista completă și pagina
        filteredProducts = [...allProducts];
        currentPage = 1;
        
        updateRangeLabels();
        aplicaFiltre();
    }

    // Sortează produsele A–Z sau Z–A după nume și reafișează
    function sortProduse(asc) {
        filteredProducts.sort((a, b) => {
            const numeA = a.querySelector('.card-title').textContent.toLowerCase();
            const numeB = b.querySelector('.card-title').textContent.toLowerCase();
            return asc ? numeA.localeCompare(numeB) : numeB.localeCompare(numeA);
        });
        refreshPagination();
    }

    // Calculează statistici (total și medie prețuri) și afișează alertă temporară
    function calculeaza() {
        const preturi = filteredProducts.map(p =>
            Number(p.querySelector('.produs').dataset.pret)
        );
        if (preturi.length === 0) {
            return alert('Nu există produse afișate!');
        }
        
        const total = preturi.reduce((a, b) => a + b, 0);
        const medie = (total / preturi.length).toFixed(2);
        const minv  = Math.min(...preturi);
        const maxv  = Math.max(...preturi);

        // Afișează datele într-un alert Bootstrap care dispare
        const statsHTML = `
            <div class="alert alert-info position-fixed bottom-0 end-0 m-3">
                <h5>Statistici</h5>
                <p>
                  Total: ${total}€<br>
                  Medie: ${medie}€<br>
                  Minim: ${minv}€<br>
                  Maxim: ${maxv}€
                </p>
            </div>`;
        
        document.body.insertAdjacentHTML('beforeend', statsHTML);
        setTimeout(() => {
            const alerta = document.querySelector('.alert-info');
            if (alerta) alerta.remove();
        }, 3000);
    }

     // Initialize modal
      const modalProdus = new bootstrap.Modal(document.getElementById('modalProdus'));
      
      // Event delegation for product clicks
      document.querySelector('.produse-list').addEventListener('click', (e) => {
          const article = e.target.closest('.produs');
          if (!article) return;
          
          // Prevent modal from opening when clicking on the details button
          if (e.target.closest('a[href^="/produs/"]')) return;
          
          // Populate modal with product data
          document.getElementById('modalTitlu').textContent = article.querySelector('.card-title').textContent;
          
          // Clone the card body content
          const cardBody = article.querySelector('.card-body').cloneNode(true);
          
          // Remove the details button from modal
          const detailsBtn = cardBody.querySelector('a[href^="/produs/"]');
          if (detailsBtn) detailsBtn.remove();
          
          // Adjust image styling for modal
          const img = cardBody.querySelector('img');
          if (img) {
              img.style.height = 'auto';
              img.classList.add('img-fluid', 'mb-3');
          }
          
          // Set modal body content
          const modalBody = document.getElementById('modalBody');
          modalBody.innerHTML = '';
          modalBody.appendChild(cardBody);
          
          // Show modal
          modalProdus.show();
      });

       // Close modal when clicking outside
      document.getElementById('modalProdus').addEventListener('click', (e) => {
          if (e.target === document.getElementById('modalProdus')) {
              modalProdus.hide();
          }
      });

    // Pornim tot
    init();
});
</script>

</body>
</html>
